# vim:fileencoding=utf-8:ft=conf

# Fonts {{{
font_family      Operator Mono Lig Book
italic_font      Operator Mono Lig Book Italic
bold_font        Operator Mono Lig Medium
bold_italic_font Operator Mono Lig Medium Italic
font_size        19.0

# font_family      Fira Code
# italic_font      Script 12 Pitch BT
# bold_font        Fira Code Bold
# bold_italic_font Script 12 Pitch BT
# font_size        18.0

# Adjust the cell dimensions.
# You can use either numbers, which are interpreted as pixels or percentages
# (number followed by %), which are interpreted as percentages of the
# unmodified values. You can use negative pixels or percentages less than
# 100% to reduce sizes (but this might cause rendering artifacts).
# adjust_line_height 0
# adjust_column_width 0

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# Change the sizes of the lines used for the box drawing unicode characters
# These values are in pts. They will be scaled by the monitor DPI to arrive at
# a pixel value. There must be four values corresponding to thin, normal, thick,
# and very thick lines;
# box_drawing_scale 0.001, 1, 1.5, 2
# }}}

# Cursor customization {{{
cursor           #ebdbb2
cursor_shape     underline
cursor_blink_interval     0.5
cursor_stop_blinking_after 0
# }}}

# Mouse {{{
url_color #458588
url_style curly

# The modifier keys to press when clicking with the mouse on URLs to open the URL
# open_url_modifiers kitty_mod

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
# open_url_with default

# Copy to clipboard on select. With this enabled, simply selecting text with
# the mouse will cause the text to be copied to clipboard. Useful on platforms
# such as macOS/Wayland that do not have the concept of primary selections. Note
# that this is a security risk, as all programs, including websites open in your
# browser can read the contents of the clipboard.
# copy_on_select no

# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
# rectangle_select_modifiers ctrl+alt

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
# select_by_word_characters :@-./_~?&=%+#

# The interval between successive clicks to detect double/triple clicks (in seconds)
# click_interval 0.5

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
# mouse_hide_wait 3.0

# Set the active window to the window under the mouse when moving the mouse around
# focus_follows_mouse no
# }}}

# Window layout {{{
# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   no
# initial_window_width   640
# initial_window_height  400

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the README.
# enabled_layouts *

# The step size (in units of cell width/cell height) to use when resizing
# windows. The cells value is used for horizontal resizing and the lines value
# for vertical resizing.
# window_resize_step_cells 2
# window_resize_step_lines 2

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
# Note that borders are displayed only when more than one window is visible. They are meant to separate multiple windows.
# window_border_width 1

# The window margin (in pts) (blank area outside the border)
# window_margin_width 10

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 15

# The color for the border of the active window
# active_border_color #00ff00

# The color for the border of inactive windows
# inactive_border_color #cccccc

# The color for the border of inactive windows in which a bell has occurred
# bell_border_color #ff5a00

# Fade the text in inactive windows by the specified amount (a number between
# zero and one, with 0 being fully faded).
# inactive_text_alpha 1.0
# }}}

# Tab bar {{{
tab_bar_edge bottom
tab_separator " â”‡ "
active_tab_foreground #d5c4a1
active_tab_background #1d2021
active_tab_font_style bold-italic
inactive_tab_foreground #a89984
inactive_tab_background #3c3836
inactive_tab_font_style normal
# }}}

# Color scheme {{{
foreground       #ebdbb2
background       #1d2021

background_opacity 1.0
dynamic_background_opacity no

# dim_opacity 0.75

# black
color0   #1d2021
color8   #928374

# red
color1   #cc241d
color9   #fb4934

# green
color2   #98971a
color10  #b8bb26

# yellow
color3   #d79921
color11  #fabd2f

# blue
color4  #458588
color12 #83a598

# magenta
color5   #b16286
color13  #d3869b

# cyan
color6   #689d6a
color14  #8ec07c

# white
color7   #a89984
color15  #ebdbb2

# 256 color resources
color24  #076678
color66  #427b58
color88  #9d0006
color96  #8f3f71
color100 #79740e
color108 #8ec07c
color109 #83a598
color130 #af3a03
color136 #b57614
color142 #b8bb26
color167 #fb4934
color175 #d3869b
color208 #fe8019
color214 #fabd2f
color223 #ebdbb2
color228 #f4e8ba
color229 #fdf4c1
color230 #ffffc8
color234 #1d2021
color235 #282828
color236 #32302f
color237 #3c3836
color239 #504945
color241 #665c54
color243 #7c6f64
color244 #928374
color245 #928374
color246 #a89984
color248 #bdae93
color250 #d5c4a1
# }}}

# Advanced {{{

clipboard_control write-clipboard read-clipboard write-primary read-primary
# }}}

# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
# kitty_mod ctrl+shift
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
# map kitty_mod+v        paste_from_clipboard
# map kitty_mod+s        paste_from_selection
# map kitty_mod+c        copy_to_clipboard
# map shift+insert       paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox
# map kitty_mod+o        pass_selection_to_program
# }}}

# Scrolling {{{
# map kitty_mod+up        scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+k         scroll_line_up
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback
# }}}

# Window management {{{
# map kitty_mod+enter    new_window
# map kitty_mod+n        new_os_window
# map kitty_mod+w        close_window
# map kitty_mod+]        next_window
# map kitty_mod+[        previous_window
# map kitty_mod+f        move_window_forward
# map kitty_mod+b        move_window_backward
# map kitty_mod+`        move_window_to_top
# map kitty_mod+r        start_resizing_window
# Switching to a particular window
# map kitty_mod+1        first_window
# map kitty_mod+2        second_window
# map kitty_mod+3        third_window
# map kitty_mod+4        fourth_window
# map kitty_mod+5        fifth_window
# map kitty_mod+6        sixth_window
# map kitty_mod+7        seventh_window
# map kitty_mod+8        eighth_window
# map kitty_mod+9        ninth_window
# map kitty_mod+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map kitty_mod+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map kitty_mod+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map kitty_mod+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
# map kitty_mod+right    next_tab
# map kitty_mod+left     previous_tab
# map kitty_mod+t        new_tab
# map kitty_mod+q        close_tab
# map kitty_mod+l        next_layout
# map kitty_mod+.        move_tab_forward
# map kitty_mod+,        move_tab_backward
# map kitty_mod+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
# map kitty_mod+equal    increase_font_size
# map kitty_mod+minus    decrease_font_size
# map kitty_mod+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map kitty_mod+f6     set_font_size 10.0
# map kitty_mod+f7     set_font_size 20.5
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
# map kitty_mod+e         kitten hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
# map kitty_mod+p>f       kitten hints --type path --program -

# Select a path/filename and open it with the default open program.
# map kitty_mod+p>shift+f kitten hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
# map kitty_mod+p>l       kitten hints --type line --program -

# Select words and insert into terminal.
# map kitty_mod+p>w       kitten hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
# map kitty_mod+f11      toggle_fullscreen
# map kitty_mod+u        input_unicode_character
# map kitty_mod+f2       edit_config_file
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
# map kitty_mod+escape   kitty_shell window
# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# You can have kitty remove all shortcut definition seen up to this point. Useful, for
# instance, to remove the default shortcuts.
# clear_all_shortcuts no
# }}}
